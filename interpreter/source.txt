(defun flatten (lambda (x)
	(cond	((null? x) x)
			((atom x) (list x))
			(t (append (flatten (car x)) (flatten (cdr x))))
)))
(flatten '(1 (2 (3 4) (5) (6 7) 8) 9))
(flatten '(a (b (c (d e))) f (g h) i))
(flatten '((1 2) ((3 4) 5) 6))
(flatten '(((k (r s t u)) g (m)) c d ((n) (o (v w x y z) q))))

(defun butlast (lambda (l)
	(reverse (cdr (reverse l)))
))
(defun rotate (lambda (l n)
	(cond	((> n 0)
				(rotate (append (cdr l) (list (car l))) (- n 1)))
			((< n 0)
				(rotate (append (last l) (butlast l)) (+ n 1)))
			(t l)
	)
))
(rotate '(1 2 3 4 5 6 7 8 9) 2)
(rotate '(1 2 3 4 5 6 7 8 9) -3)
(rotate '(1 2 3 4 5 6 7 8 9) 9)
(rotate '(1 2 3 4 5 6 7 8 9) -18)

(defun xTen (lambda (x)
  (cond ((null? x) nil)
        (t (cons (* (car x) 10) (xTen (cdr x)))))
))
(xTen '(1 2 3 4 5))

(defun factorial (lambda (n)
  (cond ((not (integerp n)) nil)
        ((< n 0) nil)
        ((= n 0) 1)
        (t (* n (factorial (- n 1))))
   )
))

(defun factorials (lambda (n)
  (cond ((not (integerp n)) nil)
        ((< n 0) nil)
        (t (progn
            (princ n)
            (princ "! = ")
            (print (factorial n))
            (factorials (- n 1))
        ))
   )
))
(factorials 36)